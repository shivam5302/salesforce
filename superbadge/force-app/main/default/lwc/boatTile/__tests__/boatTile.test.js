import { createElement } from 'lwc';
import BoatTile from 'c/boatTile';

const flushPromises = async () => new Promise((resolve) => setTimeout(resolve, 0));

describe('c-boat-tile', () => {
	let element;
	beforeEach(() => {
		element = createElement('c-boat-tile', {
			is: BoatTile
		});
		element.boat = {
			Id: '123',
			Name: 'Boaty McBoatFace',
			Description__c: 'This boat is the best!',
			Picture__c: 'http://www.example.com/boat.jpg',
			Length__c: 20,
			Contact__r: { Name: 'Contact Name' },
			BoatType__r: { Name: 'type' },
			Price__c: 300,
			Year_Built__c: 2019
		}
		document.body.appendChild(element);
	});

	afterEach(() => {
		// The jsdom instance is shared across test cases in a single file so reset the DOM
		while (document.body.firstChild) {
			document.body.removeChild(document.body.firstChild);
		}
	});

	it('TODO: test case generated by CLI command, please fill in test logic', () => {

		// Assert
		// const div = element.shadowRoot.querySelector('div');
		expect(element).toMatchSnapshot();
	});

	it('Should dispatch event onClick card', async () => {
		//Given
		const boatselectHandler = jest.fn();
		element.addEventListener('boatselect', boatselectHandler);
		await flushPromises();
		const div = element.shadowRoot.querySelector("div");


		//When
		div.click();

		//Then
		await flushPromises();
		expect(boatselectHandler).toHaveBeenCalled();
		const eventDetail = boatselectHandler.mock.calls[0][0].detail;
		expect(eventDetail.boatId).toBe('123');
		expect(element).toMatchSnapshot()

	});

});